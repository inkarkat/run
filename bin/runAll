#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
Invoke each COMMAND sequentially, passing ARGUMENT [...] to each. Overall exit
status is the highest status of all.
Can print a header with COMMAND / a full emulated prompt before each COMMAND.
HELPTEXT
printf 'Usage: %q %s\n' "$(basename "$1")" '[--with-header|--with-prompt] SIMPLECOMMAND [...] [-- [ARGUMENT [...]] [-?|-h|--help]'
printf 'Usage: %q %s\n' "$(basename "$1")" '[...] -c|--command "COMMANDLINE" [-c ...] [--] [ARGUMENT [...]] [-?|-h|--help]'
}

typeset with=
isNeedEval=
typeset -a commands=()
typeset -a simpleCommands=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--command|-c)	shift; commands+=(${commands:+;} "$1"); isNeedEval=t; shift;;
	--with-header)	shift; with=header;;
	--with-prompt)	shift; with=prompt;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		simpleCommands+=("$1"); shift;;
    esac
done
if [ ${#simpleCommands[@]} -gt 0 ]; then
    if [ "$isNeedEval" ]; then
	# Combine --command and SIMPLECOMMAND; need to quote SIMPLECOMMAND to
	# undo the effects of eval.
	for s in "${simpleCommands[@]}"
	do
	    printf -v quotedS '%q' "$s"
	    commands+=("$s")
	done
    else
	commands=("${simpleCommands[@]}")
    fi
fi
if [ ${#commands[@]} -eq 0 ]; then
    echo >&2 'ERROR: No COMMAND(s) specified; need to pass -c|--command "COMMANDLINE", or SIMPLECOMMAND.'
    exit 2
fi


case "$with" in
    prompt)
	for c in "${commands[@]}"
	do
	    if [ "$isNeedEval" ]; then
		printf '%s' "$c"
	    else
		printf '%q' "$c"
	    fi
	    printf ' %q' "$@"
	    printf '\n'
	done # | runWithPrompt --worst-status
	;;
    *)
	status=0
	typeset -a firstArg=(--first)
	for c in "${commands[@]}"
	do
	    if [ "$with" = 'header' ]; then
		header "${firstArg[@]}" "$c"
		firstArg=()
	    fi
	    ${isNeedEval:+eval} "$c" "$@" || status=$?
	done
	exit $status
	;;
esac
