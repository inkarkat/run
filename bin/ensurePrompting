#!/bin/bash
shopt -qs extglob

# Note that the setsid relinquishes the terminals's control of our process, so access to /dev/tty will fail with "/dev/tty: No such device or address" (though the device file still exists). So anything that is launched and requires interactivity needs to suppress the group leadership taking, by setting PGID=$$ script ... Cp. https://stackoverflow.com/questions/30692575/how-can-i-recover-the-controlling-tty-after-a-setsid
if [ -z "$PGID" ]; then # No parent script has become the process group leader yet.
    export USERQUERY_INPUT=/dev/stdin	# Need to use stdin for userprompt input, as the tty is no longer available (see above).
    pgid=$(($(ps -o pgid= -p "$$")))	# By defining this, we'll be killing subshell processes of this process group when we're done or interrupted. Any children with the same ambition will defer to us.
    if [ $$ -eq $pgid ] || [[ $- != *m* ]]; then    # Second condition to avoid "bash: cannot set terminal process group (...): Inappropriate ioctl for device bash: no job control in this shell"
	export PGID=$pgid   # We are (already / after setsid) in our own process group (or we don't have job control and a parent is the process group leader), announce our (their) leadership to any children, so that they don't become leaders themselves and thereby decouple themselves from our lifetime control.
    else
	exec setsid --wait "${BASH_SOURCE[0]}" "$@" # Use setsid instead of set -m (...) to avoid having another subshell in between.
    fi
fi

: ${ENSUREPROMPTING_PAGERWATCHER_THRESHOLD:=10}	# Number of consecutive COMMAND / ID observations with a pager before we assume that it always uses a pager; use -1 to disable. After one invocation that required external prompting, we'll always monitor ourselves.
: ${ENSUREPROMPTING_LONGRUNNER_DURATION:=30m} # Duration a COMMAND / ID needs to run so that it's deemed an interactive program that doesn't require prompting as the user will quit it on its own.
: ${ENSUREPROMPTING_LONGRUNNER_PERCENTAGE=90} # Ratio of COMMAND / ID runs that exceed the $ENSUREPROMPTING_LONGRUNNER_DURATION vs. total runs to determine that it's an interactive program that doesn't require prompting as the user will quit it on its own.
: ${ENSUREPROMPTING_LONGRUNNER_THRESHOLD=10} # Number of total COMMAND / ID runs before evaluating whether it's an interactive program (when $ENSUREPROMPTING_LONGRUNNER_PERCENTAGE is met or exceeded) that doesn't require prompting as the user will quit it on its own; use -1 to disable.
: ${ENSUREPROMPTING_COMMAND_JOINER=;}

case "$ENSUREPROMPTING_LONGRUNNER_DURATION" in
    +([0-9])?(s))   longRunnerDurationInSeconds="${ENSUREPROMPTING_LONGRUNNER_DURATION%s}";;
    +([0-9])m)	    longRunnerDurationInSeconds=$((${ENSUREPROMPTING_LONGRUNNER_DURATION%m} * 60));;
    +([0-9])h)	    longRunnerDurationInSeconds=$((${ENSUREPROMPTING_LONGRUNNER_DURATION%h} * 3600));;
    +([0-9])d)	    longRunnerDurationInSeconds=$((${ENSUREPROMPTING_LONGRUNNER_DURATION%d} * 86400));;
    +([0-9])w)	    longRunnerDurationInSeconds=$((${ENSUREPROMPTING_LONGRUNNER_DURATION%w} * 86400 * 7));;
    +([0-9])mo)	    longRunnerDurationInSeconds=$((${ENSUREPROMPTING_LONGRUNNER_DURATION%mo} * 86400 * 30));;
    +([0-9])y)	    longRunnerDurationInSeconds=$((${ENSUREPROMPTING_LONGRUNNER_DURATION%y} * 86400 * 365));;
    +([0-9])g)	    longRunnerDurationInSeconds=$((${ENSUREPROMPTING_LONGRUNNER_DURATION%g} * 86400 * 9131));;
    *)		    printf >&2 "ERROR: Illegal duration: %s\\n" "$ENSUREPROMPTING_LONGRUNNER_DURATION"; exit 2;;
esac

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: [ENSUREPROMPTING_PAGERWATCHER_THRESHOLD=N|-1] %q %s\n' "$(basename "$1")" '[-k|--keep-prompt] [-t|--timeout|--for TIMEOUT] [--no-prompt|-p|--prompt PROMPT] [-P|--prompt-command PROMPT-COMMANDLINE [-P ...]] [-i|--id ID] ... [-?|-h|--help]'
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '... -c|--command "COMMANDLINE" [-c ...] | [--] SIMPLECOMMAND [...]'
    echo
    printf 'Usage: echo COMMANDLINES | %q %s\n' "$(basename "$1")" "... [--bare|$(runWithPrompt --get-short-usage 2>/dev/null)]"
    echo
    printf 'Usage: %q %s <<EOF\n  COMMANDLINE\n...\nEOF\n' "$(basename "$1")" '...'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Execute COMMAND. If the command did not invoke the pager during its runtime, the
user will be prompted for confirmation at the end before the wrapper itself
concludes (to keep a terminal window or remote session open until the user
acknowledges the COMMAND's execution).
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --bare		Do not print a status line before and after launching
			the COMMAND.
HELPTEXT
    runWithPrompt --get-long-usage 2>/dev/null
    cat <<HELPTEXT
    --keep-prompt|-k	Keep the prompt on the screen instead of clearing it
			after it has been acknowledged / after the timeout.
    --timeout|-t|--for SECONDS
			Wait only for SECONDS instead of indefinitely.
    --prompt|-p	PROMPT	Use PROMPT instead of the default "Press any key to
			continue..."
    --no-prompt		Disables the default prompt (in favor of an explictly
			passed PROMPT-COMMANDLINE).
    --prompt-command|-P PROMPT-COMMANDLINE
			Execute PROMPT-COMMANDLINE when prompting.
    --id|-i ID		Identifier for the running COMMAND, to record the
			behavior with regard to use of a pager. If omitted, will
			use COMMAND itself.
HELPTEXT
}

isBare=
commands=
promptCommands=
typeset -a bashArgs=()
runWithCommand=runWithPrompt
typeset -a runWithPromptArgs=()
userpromptCommand=userprompt
typeset -a userpromptArgs=()
typeset -a userpromptPrompt=()
id=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--command|-c)	shift; commands+="${commands:+ $ENSUREPROMPTING_COMMAND_JOINER }$1"; shift;;
	--prompt-command|-P)
			shift; promptCommands+="${promptCommands:+ $ENSUREPROMPTING_COMMAND_JOINER }$1"; shift;;
	--bare)		shift; isBare=t; runWithCommand=runWith;;
	--exit-on-failure)
			bashArgs+=(-e); runWithPromptArgs+=("$1"); shift;;
	--trailing-prompt|--no-trailing-prompt|--no-output-no-prompt|--no-output-no-error|--no-success-no-count|--exit-on-success|--emulate-prompt|--worst-status)
			runWithPromptArgs+=("$1"); shift;;
	--initial-status|--no-count-on|--exit-on|--exit-unless|--comment|--summarize-failed|--summarize-failed-separator)
			runWithPromptArgs+=("$1" "$2"); shift; shift;;
	--keep-prompt|-k)
			userpromptArgs+=("$1"); shift;;
	--timeout|--for|-t)
			userpromptArgs+=("$1" "${2?}"); shift; shift;;
	--no-prompt)	shift; userpromptCommand=:;;
	--prompt|-p)	shift; userpromptPrompt=(-- "${1?}"); shift;;
	--id|-i)	shift; id="${1:?}"; shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -ne 0 ]; then
    # Combine --command and SIMPLECOMMAND; need to quote SIMPLECOMMAND to
    # undo the effects of eval.
    printf -v quotedSimpleCommand '%q ' "$@"
    commands+="${commands:+ $ENSUREPROMPTING_COMMAND_JOINER }${quotedSimpleCommand% }"
fi
: ${id:=$commands}    # Generate ID from passed COMMAND(s) if not given.
escapedId="${id//	/ }"

isCount()
{
    [[ "${1?}" =~ ^[0-9]+$ ]]
}

marker()
{
    miniDB --base-type cache --schema 'ID PAGER_USE_COUNT SHORTRUNNER_COUNT LONGRUNNER_COUNT' --table ensurePrompting "$@"
}
updateMarker()
{
    [ -n "$escapedId" ] || return 0

    typeset -a columnUpdateArgs=()
    [ $ENSUREPROMPTING_PAGERWATCHER_THRESHOLD -lt 0 ] \
	|| columnUpdateArgs+=("$@")
    if [ $ENSUREPROMPTING_LONGRUNNER_THRESHOLD -ge 0 ]; then
	[ $SECONDS -ge $longRunnerDurationInSeconds ] \
	    && columnUpdateArgs+=(--column LONGRUNNER_COUNT++) \
	    || columnUpdateArgs+=(--column SHORTRUNNER_COUNT++)
    fi

    [ ${#columnUpdateArgs[@]} -gt 0 ] || return 0
    marker --update "$escapedId" "${columnUpdateArgs[@]}"
}
recordDurationAndPagerUse()
{
    updateMarker --column PAGER_USE_COUNT++
}
recordDurationAndPromptingRequired()
{
    updateMarker --column PAGER_USE_COUNT=X	# Increment only supports positive integers; a non-numeric value won't ever be incremented.
}
isPagerPreviouslyUsedConsistentlyOrConfirmedLongRunner()
{
    [ -n "$escapedId" ] && [ $ENSUREPROMPTING_PAGERWATCHER_THRESHOLD -ge 0 -o $ENSUREPROMPTING_LONGRUNNER_THRESHOLD -ge 0 ] || return 1

    local queryVariables; queryVariables=$(marker --query "$escapedId" --columns \* --as-shell-variables) || return 1
    eval "$queryVariables"

    if [ $ENSUREPROMPTING_PAGERWATCHER_THRESHOLD -ge 0 ] \
	&& isCount "$PAGER_USE_COUNT" \
	&& [ $PAGER_USE_COUNT -ge $ENSUREPROMPTING_PAGERWATCHER_THRESHOLD ]
    then
	case ",${DEBUG:-}," in *,ensurePrompting,*) echo >&2 "${PS4}ensurePrompting: according to our records, the command $id always uses a pager";; esac
	return 0
    fi

    if [ $ENSUREPROMPTING_LONGRUNNER_THRESHOLD -ge 0 ] \
	&& local total=$((${LONGRUNNER_COUNT:-0} + ${SHORTRUNNER_COUNT:-0})) \
	&& [ $total -gt 0 ] \
	&& local percentage=$((100 * ${LONGRUNNER_COUNT:-0} / total)) \
	&& ((percentage >= ENSUREPROMPTING_LONGRUNNER_PERCENTAGE))
    then
	case ",${DEBUG:-}," in *,ensurePrompting,*) echo >&2 "${PS4}ensurePrompting: according to our records, the command $id is ${percentage}% long-running";; esac
	return 0
    fi

    return 1
}

optionalPrompt()
{
    eval "$promptCommands"
    $userpromptCommand "${userpromptArgs[@]}" "${userpromptPrompt[@]}"
    exit $status
}

pagerWatcher()
{
    while :
    do
	if pgrep --pgroup ${PGID:?} --exact "${PAGER}${PAGER:+|}less" --count >/dev/null; then
	    case ",${DEBUG:-}," in *,ensurePrompting,*) echo >&2 "${PS4}ensurePrompting: pager detected";; esac
	    kill -SIGUSR1 $$
	    break
	fi
	sleep .5
    done
}

if isPagerPreviouslyUsedConsistentlyOrConfirmedLongRunner; then
    cleanup() { :; }
else
    trap 'recordDurationAndPromptingRequired; optionalPrompt' EXIT
    trap 'trap - EXIT; recordDurationAndPagerUse' SIGUSR1
    pagerWatcher </dev/null &
    cleanup()
    {
	kill %- 2>/dev/null
    }
fi


SECONDS=0
if [ -z "$commands" ]; then
    if [ "$isBare" ] && [ ${#runWithPromptArgs[@]} -eq 0 -o "${#runWithPromptArgs[*]}" = --exit-on-failure ]; then
	bash "${bashArgs[@]}" -
    else
	${runWithCommand:?} "${runWithPromptArgs[@]}"
    fi
else
    eval "$commands"
fi
status=$?
cleanup
exit $status
