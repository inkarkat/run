#!/bin/bash

: ${RUNALL_ARG_MARKER='{}'}
argMarker="$RUNALL_ARG_MARKER"; unset RUNALL_ARG_MARKER

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--with-header|--with-prompt $(runWithPrompt --get-short-usage 2>/dev/null)] -c|--command "COMMANDLINE" [...] | SIMPLECOMMAND [...] [-- [ARGUMENT [...]] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Invoke each COMMAND sequentially, passing all ARGUMENT(s) (which ${argMarker:+either }are
appended to${argMarker:+ or replace any $argMarker marker inside} COMMANDLINE) to each COMMAND.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    cat <<HELPTEXT
    --with-header	Print a header (containing COMMAND) before each
			execution.
    --with-prompt	Emulate a full prompt (as if invoking COMMAND) before
			each execution.
HELPTEXT
    runWithPrompt --get-long-usage 2>/dev/null
    cat <<HELPTEXT

EXIT STATUS:
Overall exit status is the highest status of all. If you specify any
runWith[Prompt] argument, --worst-status needs to be explicitly passed.

Example:
HELPTEXT
    printf '%q %s\n' "$(basename "$1")" "--command 'bash -c \"ping -c1 -q \$2 && echo \$1 is up.\" bash' -- webserver wotan"
}

with=
typeset -a commands=()
runWithCommand=runWith
typeset -a runWithPromptArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--command|-c)	shift; commands+=("$1"); shift;;
	--with-header)	shift; with=header;;
	--with-prompt)	shift; with=prompt; runWithCommand=runWithPrompt;;

	--trailing-prompt|--no-trailing-prompt|--no-output-no-prompt|--no-output-no-error|--no-success-no-count|--exit-on-success|--exit-on-failure|--emulate-prompt|--worst-status)
			runWithPromptArgs+=("$1"); shift;;
	--initial-status|--no-count-on|--exit-on|--exit-unless|--comment|--summarize-failed|--summarize-failed-separator)
			runWithPromptArgs+=("$1" "$2"); shift; shift;;

	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		typeset -a cmd=()
			while [ $# -gt 0 -a "$1" != '--' ]
			do
			    cmd+=("$1")
			    shift
			done
			printf -v quotedSimpleCommand '%q ' "${cmd[@]}"; quotedSimpleCommand="${quotedSimpleCommand% }"
			printf -v escapedArgMarker %q "$argMarker"
			commands+=("${quotedSimpleCommand//"$escapedArgMarker"/$argMarker}")	# %q escapes {}, we don't want that to have it interpolated later.
			;;
    esac
done
if [ ${#commands[@]} -eq 0 ]; then
    echo 'ERROR: No COMMAND(s) specified; need to pass -c|--command "COMMANDLINE", or SIMPLECOMMAND.'
    echo
    printUsage "$0"
    exit 2
elif [ ${#runWithPromptArgs[@]} -gt 0 -a "$with" = header ]; then
    echo 'ERROR: Cannot combine runWith[Prompt] arguments with --with-header.'
    echo
    printUsage "$0"
    exit 2
fi >&2


case "$with" in
    prompt)
	[ ${#runWithPromptArgs[@]} -eq 0 ] && runWithPromptArgs=(--worst-status)
	for c in "${commands[@]}"
	do
	    if [[ "$c" =~ \{\} ]]; then
		printf -v quotedArgs '%q ' "$@"; quotedArgs="${quotedArgs% }"
		printf '%s\n' "${c//"$argMarker"/$quotedArgs}"
	    else
		printf %s "$c"
		printf ' %q' "$@"
		printf '\n'
	    fi
	done | ${runWithCommand:?} "${runWithPromptArgs[@]}"
	;;
    *)
	status=0
	typeset -a firstArg=(--first)
	for c in "${commands[@]}"
	do
	    if [ "$with" = 'header' ]; then
		header "${firstArg[@]}" "$c"
		firstArg=()
	    fi

	    printf -v quotedArgs '%q ' "$@"; quotedArgs="${quotedArgs% }"
	    typeset -a a=("$@")
	    interpolatedCommand="${c//"$argMarker"/$quotedArgs}"
	    [ "$interpolatedCommand" = "$c" ] || a=()
	    eval "$interpolatedCommand" '"${a[@]}"' || { exitStatus=$?; if [ $exitStatus -gt $status ]; then status=$exitStatus; fi; }
	done
	exit $status
	;;
esac
