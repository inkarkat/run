#!/bin/bash

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--with-header|--with-prompt [--initial-status NUM] [--trailing-prompt|--no-trailing-prompt] [--no-output-no-prompt] [--no-output-no-error] [--no-success-no-count|--no-count-on N] [--exit-on-success|--exit-on-failure|--exit-on NUM] [--emulate-prompt] [--worst-status] [--comment COMMENT] [--summarize-failed ERROR-TEXT [--summarize-failed-separator SEP]]] -c|--command "COMMANDLINE" [...] | SIMPLECOMMAND [...] [-- [ARGUMENT [...]] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Invoke each COMMAND sequentially, passing ARGUMENT [...] to each.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    cat <<HELPTEXT
    --with-header   Print a header (containing COMMAND) before each execution.
    --with-prompt   Emulate a full prompt (as if invoking COMMAND) before each
		    execution.
    --initial-status NUM    Customizations of the prompt emulation around
    --trailing-prompt	    COMMAND; cp. runWithPrompt
    --no-trailing-prompt
    --no-output-no-prompt
    --no-output-no-error
    --no-success-no-count
    --no-count-on N
    --exit-on-success
    --exit-on-failure
    --exit-on NUM
    --emulate-prompt
    --worst-status
    --comment COMMENT
    --summarize-failed ERROR-TEXT
    --summarize-failed-separator SEP
EXIT STATUS:
Overall exit status is the highest status of all. If you specify any
runWithPrompt argument, --worst-status needs to be explicitly passed.

Example:
HELPTEXT
    printf '%q %s\n' "$(basename "$1")" "--command 'bash -c \"ping -c1 -q \$2 && echo \$1 is up.\" bash' -- webserver wotan"
}

# In order to maintain the order of commands, we need to investigate beforehand
# whether eval is needed.
isNeedEval=
for arg
do
    case "$arg" in
	--command|-c)	isNeedEval=t;;
	--)		break;;
    esac
done

with=
typeset -a commands=()
typeset -a simpleCommands=()
typeset -a runWithPromptArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--command|-c)	shift; commands+=("$1"); isNeedEval=t; shift;;
	--with-header)	shift; with=header;;
	--with-prompt)	shift; with=prompt;;

	--trailing-prompt|--no-trailing-prompt|--no-output-no-prompt|--no-output-no-error|--no-success-no-count|--exit-on-success|--exit-on-failure|--emulate-prompt|--worst-status)
			runWithPromptArgs+=("$1"); shift;;
	--initial-status|--no-count-on|--exit-on|--comment|--summarize-failed|--summarize-failed-separator)
			runWithPromptArgs+=("$1" "$2"); shift; shift;;

	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		if [ "$isNeedEval" ]; then
			    # Combine --command and SIMPLECOMMAND; need to quote SIMPLECOMMAND to
			    # undo the effects of eval.
			    printf -v quotedSimpleCommand '%q' "$1"
			    commands+=("${quotedSimpleCommand% }")
			else
			    commands+=("$1")
			fi
			shift
			;;
    esac
done
if [ ${#commands[@]} -eq 0 ]; then
    echo >&2 'ERROR: No COMMAND(s) specified; need to pass -c|--command "COMMANDLINE", or SIMPLECOMMAND.'
    exit 2
fi


case "$with" in
    prompt)
	[ ${#runWithPromptArgs[@]} -eq 0 ] && runWithPromptArgs=(--worst-status)
	quoter='%q'; [ "$isNeedEval" ] && quoter='%s'
	for c in "${commands[@]}"
	do
	    printf "$quoter" "$c"
	    printf ' %q' "$@"
	    printf '\n'
	done | runWithPrompt "${runWithPromptArgs[@]}"
	;;
    *)
	status=0
	typeset -a firstArg=(--first)
	for c in "${commands[@]}"
	do
	    if [ "$with" = 'header' ]; then
		header "${firstArg[@]}" "$c"
		firstArg=()
	    fi
	    if [ "$isNeedEval" ]; then
		eval "$c" '"$@"' || { exitStatus=$?; if [ $exitStatus -gt $status ]; then status=$exitStatus; fi; }
	    else
		"$c" "$@" || { exitStatus=$?; if [ $exitStatus -gt $status ]; then status=$exitStatus; fi; }
	    fi
	done
	exit $status
	;;
esac
