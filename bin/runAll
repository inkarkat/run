#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
Invoke each COMMAND sequentially, passing ARGUMENT [...] to each. Overall exit
status is the highest status of all.
Can print a header with COMMAND / a full emulated prompt before each COMMAND.
HELPTEXT
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--with-header|--with-prompt] -c|--command "COMMANDLINE" | SIMPLECOMMAND [...] [-- [ARGUMENT [...]] [-?|-h|--help]'
}

# In order to maintain the order of commands, we need to investigate beforehand
# whether eval is needed.
isNeedEval=
for arg
do
    case "$arg" in
	--command|-c)	isNeedEval=t;;
	--)		break;;
    esac
done

typeset with=
typeset -a commands=()
typeset -a simpleCommands=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--command|-c)	shift; commands+=("$1"); isNeedEval=t; shift;;
	--with-header)	shift; with=header;;
	--with-prompt)	shift; with=prompt;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		if [ "$isNeedEval" ]; then
			    # Combine --command and SIMPLECOMMAND; need to quote SIMPLECOMMAND to
			    # undo the effects of eval.
			    printf -v quotedSimpleCommand '%q' "$1"
			    commands+=("$quotedSimpleCommand")
			else
			    commands+=("$1")
			fi
			shift
			;;
    esac
done
if [ ${#commands[@]} -eq 0 ]; then
    echo >&2 'ERROR: No COMMAND(s) specified; need to pass -c|--command "COMMANDLINE", or SIMPLECOMMAND.'
    exit 2
fi


case "$with" in
    prompt)
	for c in "${commands[@]}"
	do
	    if [ "$isNeedEval" ]; then
		printf '%s' "$c"
	    else
		printf '%q' "$c"
	    fi
	    printf ' %q' "$@"
	    printf '\n'
	done | runWithPrompt --worst-status
	;;
    *)
	status=0
	typeset -a firstArg=(--first)
	for c in "${commands[@]}"
	do
	    if [ "$with" = 'header' ]; then
		header "${firstArg[@]}" "$c"
		firstArg=()
	    fi
	    if [ "$isNeedEval" ]; then
		eval "$c" '"$@"' || status=$?
	    else
		"$c" "$@" || status=$?
	    fi
	done
	exit $status
	;;
esac
